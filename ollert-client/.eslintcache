[{"/Users/sbk/Documents/dev/kanban/ollert-client/src/index.tsx":"1","/Users/sbk/Documents/dev/kanban/ollert-client/src/reportWebVitals.ts":"2","/Users/sbk/Documents/dev/kanban/ollert-client/src/App.tsx":"3","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/ui/TaskItem.tsx":"4","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/inputs/NewTaskInput.tsx":"5","/Users/sbk/Documents/dev/kanban/ollert-client/src/pages/IndexPage.tsx":"6","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/ui/Navbar.tsx":"7","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/dialogs/LoginDialog.tsx":"8","/Users/sbk/Documents/dev/kanban/ollert-client/src/store/index.ts":"9","/Users/sbk/Documents/dev/kanban/ollert-client/src/store/user/reducers.ts":"10","/Users/sbk/Documents/dev/kanban/ollert-client/src/store/user/types.ts":"11","/Users/sbk/Documents/dev/kanban/ollert-client/src/store/board/reducers.ts":"12","/Users/sbk/Documents/dev/kanban/ollert-client/src/store/board/types.ts":"13","/Users/sbk/Documents/dev/kanban/ollert-client/src/store/board/actions.ts":"14","/Users/sbk/Documents/dev/kanban/ollert-client/src/api/boardRepository.ts":"15","/Users/sbk/Documents/dev/kanban/ollert-client/src/api/client.ts":"16","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/cards/BoardCard.tsx":"17","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/lists/BoardList.tsx":"18","/Users/sbk/Documents/dev/kanban/ollert-client/src/pages/BoardDetailPage.tsx":"19","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/ui/BoardColumn.tsx":"20","/Users/sbk/Documents/dev/kanban/ollert-client/src/api/taskRepository.ts":"21","/Users/sbk/Documents/dev/kanban/ollert-client/src/api/columnRepository.ts":"22","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/lists/TaskList.tsx":"23","/Users/sbk/Documents/dev/kanban/ollert-client/src/helpers/render.ts":"24","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/cards/NewBoardCard.tsx":"25","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/dialogs/NewBoardDialog.tsx":"26","/Users/sbk/Documents/dev/kanban/ollert-client/src/api/authRepository.ts":"27","/Users/sbk/Documents/dev/kanban/ollert-client/src/helpers/auth-header.ts":"28","/Users/sbk/Documents/dev/kanban/ollert-client/src/helpers/token-set.ts":"29","/Users/sbk/Documents/dev/kanban/ollert-client/src/store/user/actions.ts":"30"},{"size":814,"mtime":1610712516921,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":1610712516924,"results":"33","hashOfConfig":"32"},{"size":770,"mtime":1610818730588,"results":"34","hashOfConfig":"32"},{"size":2563,"mtime":1611322933749,"results":"35","hashOfConfig":"32"},{"size":791,"mtime":1611236615925,"results":"36","hashOfConfig":"32"},{"size":1174,"mtime":1611328220534,"results":"37","hashOfConfig":"32"},{"size":1519,"mtime":1611327974227,"results":"38","hashOfConfig":"32"},{"size":2332,"mtime":1611403407119,"results":"39","hashOfConfig":"32"},{"size":281,"mtime":1610730363471,"results":"40","hashOfConfig":"32"},{"size":397,"mtime":1611327538346,"results":"41","hashOfConfig":"32"},{"size":410,"mtime":1611327679707,"results":"42","hashOfConfig":"32"},{"size":4619,"mtime":1611322884551,"results":"43","hashOfConfig":"32"},{"size":3165,"mtime":1611256727746,"results":"44","hashOfConfig":"32"},{"size":1820,"mtime":1611257578702,"results":"45","hashOfConfig":"32"},{"size":459,"mtime":1611321163923,"results":"46","hashOfConfig":"32"},{"size":202,"mtime":1611324913456,"results":"47","hashOfConfig":"32"},{"size":2059,"mtime":1611321274081,"results":"48","hashOfConfig":"32"},{"size":888,"mtime":1611236409364,"results":"49","hashOfConfig":"32"},{"size":3035,"mtime":1611230375016,"results":"50","hashOfConfig":"32"},{"size":5408,"mtime":1611321432096,"results":"51","hashOfConfig":"32"},{"size":424,"mtime":1611256435117,"results":"52","hashOfConfig":"32"},{"size":511,"mtime":1611256454507,"results":"53","hashOfConfig":"32"},{"size":360,"mtime":1611065492174,"results":"54","hashOfConfig":"32"},{"size":210,"mtime":1611173203527,"results":"55","hashOfConfig":"32"},{"size":868,"mtime":1611321319400,"results":"56","hashOfConfig":"32"},{"size":1537,"mtime":1611321695178,"results":"57","hashOfConfig":"32"},{"size":473,"mtime":1611326280477,"results":"58","hashOfConfig":"32"},{"size":291,"mtime":1611326057559,"results":"59","hashOfConfig":"32"},{"size":123,"mtime":1611326105108,"results":"60","hashOfConfig":"32"},{"size":176,"mtime":1611327681241,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"ojo9nz",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/Users/sbk/Documents/dev/kanban/ollert-client/src/index.tsx",[],["133","134"],"/Users/sbk/Documents/dev/kanban/ollert-client/src/reportWebVitals.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/App.tsx",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/components/ui/TaskItem.tsx",["135"],"import { Card, CardContent, makeStyles, Menu, MenuItem, Typography } from '@material-ui/core'\nimport { MoreHorizOutlined } from '@material-ui/icons'\nimport React, { useEffect, useState } from 'react'\nimport { Draggable } from 'react-beautiful-dnd'\nimport { useDispatch } from 'react-redux'\nimport taskRepository from '../../api/taskRepository'\nimport { deleteTask } from '../../store/board/actions'\nimport { DeleteTask, Task, UpdateTask } from '../../store/board/types'\n\ntype TaskItemProps = {\n  task: Task,\n  index: number\n}\n\nconst styles = makeStyles({\n  content: {\n    padding: '0.5rem',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  card: {\n    marginBottom: '0.25rem'\n  }\n})\n\nexport const TaskItem = ({task, index}: TaskItemProps) => {\n  const { id, columnId, relativeOrder, loadedOnBoard } = task\n  const classes = styles()\n  const dispatch = useDispatch()\n  const [actionAnchorEl, setActionAnchorEl] = useState(null)\n  const [actionMenuOpen, setActionMenuOpen] = useState(false)\n\n  const handleDelete = async () => {\n    const deletePayload: DeleteTask = {\n      id: id,\n      columnId: columnId\n    }\n\n    await taskRepository.delete(id)\n    dispatch(deleteTask(deletePayload))\n  }\n\n  const handleActionClick = (e: any) => {\n    setActionAnchorEl(e.currentTarget)\n    setActionMenuOpen(true)\n  }\n\n  // update task order\n  const updateTaskOrder = async () => {\n    const taskDto: UpdateTask = {\n      relativeOrder: relativeOrder,\n      columnId: columnId\n    }\n\n    try {\n      await taskRepository.patch(id, taskDto)\n    } catch (e) {\n      // failed to update\n      console.log('Failed to update task order')\n    }\n  }\n\n  // Find a better order solution  \n  useEffect(() => {\n    if (loadedOnBoard !== undefined) {\n      updateTaskOrder()\n    }\n  }, [columnId, relativeOrder])\n\n  return (\n    <Draggable draggableId={id} index={index}>\n      {(provided) => (\n        <Card variant=\"outlined\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className={classes.card}>\n        <CardContent className={classes.content}>\n          <Typography color=\"textSecondary\">\n            {task.name}\n          </Typography>\n          <MoreHorizOutlined onClick={handleActionClick} />\n          <Menu\n            keepMounted\n            anchorEl={actionAnchorEl}\n            open={actionMenuOpen}\n            onClose={() => setActionMenuOpen(false)}\n          >\n            <MenuItem onClick={handleDelete}>Delete task</MenuItem>\n          </Menu>\n        </CardContent>\n      </Card>\n      )}\n    </Draggable>\n  )\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/inputs/NewTaskInput.tsx",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/pages/IndexPage.tsx",["136","137"],"import React, { useEffect } from 'react'\nimport { Button, Container } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../store'\nimport { Board } from '../store/board/types'\n\nimport BoardRepository from '../api/boardRepository'\nimport { addBoards } from '../store/board/actions'\nimport { BoardList } from '../components/lists/BoardList'\n\nexport const IndexPage = () => {\n  const dispatch = useDispatch()\n\n  const boards: Board[] = useSelector(\n    (state: RootState) => state.board.boards\n  )\n\n  const loggedIn: Boolean = useSelector(\n    (state: RootState) => state.user.loggedIn\n  )\n\n  const fetchBoards = async () => {\n    try {\n      const { data } = await BoardRepository.getAll()\n      dispatch(addBoards(data))\n    } catch (e) {\n      console.log('Failed to fetch boards!')\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    if (loggedIn) {\n      fetchBoards()\n    }\n  }, [loggedIn])\n\n  return (\n    <Container>\n      {loggedIn ? (\n        <div>\n          <h1>Your boards</h1>\n          <BoardList boards={boards} />\n        </div>\n      )\n      : <h1>Log in or Register</h1>\n    }\n    </Container>\n  )\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/ui/Navbar.tsx",["138"],"import React, { useEffect, useState } from 'react'\nimport { Button } from '@material-ui/core'\nimport { LoginDialog } from '../dialogs/LoginDialog'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../store'\nimport { User } from '../../store/user/types'\nimport { Link } from 'react-router-dom'\nimport { tokenSet } from '../../helpers/token-set'\nimport authRepository from '../../api/authRepository'\nimport { setUser } from '../../store/user/actions'\n\nexport const Navbar = () => {\n  const [loginOpen, setLoginOpen] = useState(false)\n  const dispatch = useDispatch()\n\n  const user: User | null = useSelector(\n    (state: RootState) => state.user.user\n  )\n  \n  const initiateUser = async () => {\n    console.log('Get me and more')\n    const { data } : { data: User } = await authRepository.getMe()\n    dispatch(setUser(data))\n  }\n\n  const handleClose = () => {\n    setLoginOpen(false)\n  }\n\n  const loginButton = () => {\n    return (\n      <Button onClick={() => setLoginOpen(true)} variant=\"contained\" color=\"primary\">Login</Button>\n    )\n  }\n\n  useEffect(() => {\n    if (tokenSet()) {\n      initiateUser()\n    }\n  }, [])\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"navbar-left\">\n        <Link to=''>\n          <Button color=\"primary\" size=\"large\">Ollert</Button>\n        </Link>\n      </div>\n      <div className=\"navbar-right\">\n        {user ? user.email : loginButton()}\n      </div>\n      <LoginDialog loginOpen={loginOpen} onClose={handleClose}/>\n    </div>\n  )\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/dialogs/LoginDialog.tsx",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/store/index.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/store/user/reducers.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/store/user/types.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/store/board/reducers.ts",["139","140","141"],"import taskRepository from \"../../api/taskRepository\";\nimport { setCurrentBoard } from \"./actions\";\nimport { BoardState, BoardActionTypes, ADD_TASK, ADD_COLUMN, SET_CURRENT_BOARD, ADD_BOARDS, ADD_BOARD, UPDATE_COLUMN, Task, UPDATE_TASK, MOVE_TASK, ColumnnTask, DELETE_TASK, DELETE_COLUMN, DELETE_BOARD } from \"./types\";\n\n// TODO make state flatter\n// some duplicates going on inside currentBoard and columns\nconst initialState: BoardState = {\n  boards: [],\n  currentBoard: null,\n  columns: [],\n  tasks: null\n}\n\nexport function boardReducer(state = initialState, action: BoardActionTypes): BoardState {\n  switch (action.type) {\n    case ADD_BOARDS:\n      return {\n        ...state,\n        boards: action.payload\n      }\n    case ADD_BOARD:\n      /* return {\n        ...state,\n        boards: [...state.boards, action.payload]\n      } */\n      return state\n    case SET_CURRENT_BOARD:\n      let columns = action.payload.columns\n      const flatTasks: ColumnnTask = {}\n      columns.sort((a, b) => {\n        if (new Date(a.createdAt) < new Date(b.createdAt)) {\n          return -1\n        }\n        return 1\n      })\n\n      columns.forEach((col) => (\n        flatTasks[col.id] = col.tasks.sort((a,b) => a.relativeOrder - b.relativeOrder)\n      ))\n\n      return {\n        ...state,\n        currentBoard: action.payload,\n        columns: columns,\n        tasks: flatTasks\n      }\n    case ADD_TASK:\n      if (!state.currentBoard) {\n        throw new Error(\"Current board is null, cannot add task: reducers.ts\");\n      }\n\n      return {\n        ...state,\n        tasks: {\n          ...state.tasks,\n          [action.payload.columnId]:\n            [...state.tasks![action.payload.columnId]].concat(action.payload)\n        }\n      }\n    case ADD_COLUMN:\n      return {\n        ...state,\n        columns: [\n          ...state.columns,\n          action.payload\n        ],\n        tasks: {\n          ...state.tasks,\n          [action.payload.id]: []\n        }\n      }\n    case UPDATE_COLUMN:\n      return {\n        ...state,\n        columns:\n          state.columns.map((col) => {\n            if (col.id === action.payload.id) {\n              return {\n                ...col,\n                ...action.payload\n              }\n            }\n            return col\n          })\n      }\n    case MOVE_TASK:\n      const {source, destination} = action.payload\n      let sameCol = false\n      if (source.columnId === destination.columnId) {\n        sameCol = true\n      }\n\n      // Copy source col and remove task from column\n      const sourceColTasks: Task[]  = [...state.tasks![source.columnId]]\n      const task: Task = sourceColTasks.splice(source.index, 1)[0]\n\n      // copy destination col\n      const destColTasks: Task[] = [...state.tasks![destination.columnId]]\n      // calculate new value for this task's order\n      let newPos: number\n\n      // check where task was dropped\n      if (destColTasks.length === 0) {\n        newPos = 20\n      } \n      else if (destination.index === 0) {\n        // dropped at top\n        newPos = destColTasks[destination.index].relativeOrder - 10\n      } else if (destination.index === destColTasks.length) {\n        // dropped at bottom\n        newPos = destColTasks[destination.index - 1].relativeOrder + 10\n      } else {\n        // dropped between tasks\n        newPos = (\n          destColTasks[destination.index].relativeOrder +\n          destColTasks[destination.index-1].relativeOrder\n        )/ 2\n      }\n      task.relativeOrder = newPos\n      task.columnId = destination.columnId\n      // this is a shit mix because of weird component rendering in react-dnd-beautiful\n      task.loadedOnBoard = true\n\n      if (sameCol) {\n        destColTasks.splice(source.index, 1)\n      }\n      // add task to destination column\n      destColTasks.splice(\n        destination.index,\n        0,\n        task\n      )\n\n      return {\n        ...state,\n        tasks: {\n          ...state.tasks,\n          [source.columnId]: sourceColTasks,\n          [destination.columnId]: destColTasks\n        }\n      }\n    case DELETE_TASK:\n      const colId = action.payload.columnId\n      return {\n        ...state,\n        tasks: {\n          ...state.tasks,\n          [colId]:\n            state.tasks![colId].filter((col) => (col.id !== action.payload.id))\n        }\n      }\n    case DELETE_COLUMN:\n      return {\n        ...state,\n        columns:\n          state.columns.filter((col) => col.id !== action.payload.id),\n      }\n    case DELETE_BOARD:\n      return {\n        ...state,\n        boards: state.boards.filter((board) => board.id !== action.payload.id)\n      }\n    default:\n      return state\n  }\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/store/board/types.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/store/board/actions.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/api/boardRepository.ts",["142"],"import { NewBoard } from '../store/board/types';\nimport client from './client'\n\n// fix client returns Promise<T>\nexport default {\n  create(payload: NewBoard) : Promise<any> {\n    return client.post('boards', payload)\n  },\n  getDetails(id: string) : Promise<any> {\n    return client.get(`boards/${id}/`)\n  },\n  getAll() : Promise<any> {\n    return client.get('boards/')\n  },\n  delete(id: string) : Promise<any> {\n    return client.delete(`boards/${id}/`)\n  }\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/api/client.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/components/cards/BoardCard.tsx",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/components/lists/BoardList.tsx",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/pages/BoardDetailPage.tsx",["143","144","145","146","147"],"import { Button, Container } from '@material-ui/core'\nimport React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { RootState } from '../store'\nimport boardRepository from '../api/boardRepository'\nimport columnRepository from '../api/columnRepository'\nimport taskRepository from '../api/taskRepository'\nimport { addColumn, moveTask, setCurrentBoard, updateTask } from '../store/board/actions'\nimport { BoardColumn } from '../components/ui/BoardColumn'\nimport { BoardDetail, ColumnDetail, MoveTask, NewColumn, UpdateTask } from '../store/board/types'\nimport { DragDropContext } from 'react-beautiful-dnd'\ninterface Params {\n  id: string\n}\n\n// find better place for these interfaces\n/* interface DraggableResult {\n  destination: DestinationResult\n  draggableId: string,\n  source: SourceResult\n} */\n\nexport const BoardDetailPage = () => {\n  let { id } = useParams<Params>()\n  const dispatch = useDispatch()\n\n  const currentBoard: BoardDetail | null = useSelector(\n    (state: RootState) => state.board.currentBoard\n  )\n\n  const columns: ColumnDetail[] = useSelector(\n    (state: RootState) => state.board.columns\n  )\n\n  // useEffect hook is called once on load and then when [deps] -> id changes\n  useEffect(() => {\n    const getDetails = async () => {\n      try {\n        // fetch board details\n        const { data } = await boardRepository.getDetails(id)\n        // set current board\n        dispatch(setCurrentBoard(data))\n      } catch (e) {\n        console.log(e)\n        console.log('Couldnt get board details')\n      }\n    }\n    getDetails()\n  }, [id])\n\n  const createNewColumn = async () => {\n    console.log(`Create new column for ${currentBoard!.id}`)\n    const column: NewColumn = {\n      boardId: currentBoard!.id\n    }\n\n    try {\n      const { data } = await columnRepository.create(column)\n      dispatch(addColumn(data))\n    } catch (e) {\n      console.log('Failed to create column')\n      console.log(e)\n    }\n  }\n\n  const onDragEnd = async (result: any) => {\n    console.log(result)\n    const {draggableId, source, destination} = result\n    if (!destination) {\n      return\n    }\n\n    const taskDto: UpdateTask = {\n      columnId: destination.droppableId,\n      // relativeOrder: destination.index\n    }\n\n    const moveTaskObj: MoveTask = {\n      source: {\n        index: source.index,\n        columnId: source.droppableId\n      },\n      destination: {\n        index: destination.index,\n        columnId: destination.droppableId\n      }\n    }\n    dispatch(moveTask(moveTaskObj))\n  }\n\n  return (\n    <Container>\n      <h1>{currentBoard?.name}</h1>\n      <div className=\"columns\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          {columns.map((column: ColumnDetail) => (\n            <BoardColumn key={column.id} column={column} />\n          ))}\n        </DragDropContext>\n        <Button onClick={createNewColumn} variant=\"contained\" color=\"primary\">\n          New column\n        </Button>\n      </div>\n    </Container>\n  )\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/ui/BoardColumn.tsx",["148","149"],"import React, { useRef, useState } from \"react\"\nimport { Card, CardContent, Divider, makeStyles, Menu, MenuItem, TextField, Typography } from \"@material-ui/core\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { ColumnDetail, DeleteColumn, NewTask, Task, UpdateColumn } from \"../../store/board/types\"\nimport { NewTaskInput } from \"../inputs/NewTaskInput\"\nimport { TaskItem } from \"./TaskItem\"\nimport { addTask, deleteColumn, updateColumn } from \"../../store/board/actions\"\n\nimport taskRepository from '../../api/taskRepository'\nimport columnRepository from '../../api/columnRepository'\nimport { Droppable } from \"react-beautiful-dnd\"\nimport { RootState } from \"../../store\"\nimport { DeleteOutline, MoreHorizOutlined } from \"@material-ui/icons\"\n\n\ninterface Props {\n  column: ColumnDetail\n}\n\nconst styles = makeStyles({\n  content: {\n    padding: '1rem'\n  },\n  droppable: {\n    minHeight: '3rem'\n  },\n  newTask: {\n    marginTop: '1rem'\n  },\n  top: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  actionIcon: {\n    '&:hover': {\n      cursor: 'pointer'\n     },\n  }\n})\n\nexport const BoardColumn = ({column} : Props) => {\n  const classes = styles()\n  const [nameEditActive, setNameEditActive] = useState<boolean>(false)\n  const [newName, setNewName] = useState<string>('')\n  const [actionMenuOpen, setActionMenuOpen] = useState<boolean>(false)\n  const [actionAnchorEl, setActionAnchorEl] = useState(null)\n\n  // tasks for this column\n  const tasks: Task[] = useSelector(\n    (state: RootState) => state.board.tasks![column.id]\n  )\n\n  const dispatch = useDispatch()\n\n  const handleDelete = async () => {\n    const deletePayload: DeleteColumn = {\n      id: column.id\n    }\n    \n    await columnRepository.delete(column.id)\n    dispatch(deleteColumn(deletePayload))\n  }\n\n  const createNewTask = async (task: NewTask) => {\n    // set new tasks position\n    let taskPos: number = 20\n    const tasksCopy: Task[]  = [...tasks]\n\n    if (tasksCopy.length > 0) {\n      const referenceTask: Task = tasksCopy.splice(tasksCopy.length-1, 1)[0]\n      taskPos = taskPos + referenceTask.relativeOrder\n    }\n\n    task.columnId = column.id\n    task.relativeOrder = taskPos\n\n    try {\n      const { data } = await taskRepository.create(task)\n      dispatch(addTask(data))\n    } catch (e) {\n      console.log(e)\n      console.log('Failed to add task')\n    }\n  }\n\n  const updateName = async () => {\n    if (newName === column.name) {\n      return\n    }\n\n    // update column name\n    console.log(`Update name w. ${newName}`)\n    const updateDto: UpdateColumn  = {\n      name: newName\n    }\n\n    await columnRepository.patch(column.id, updateDto)\n    \n    // add id to payload for reducers\n    updateDto.id = column.id\n    dispatch(updateColumn(updateDto))\n    \n    // reset newName and exit edit mode\n    setNewName('')\n    setNameEditActive(false)\n  }\n\n  const handleActionClick = (e: any) => {\n    setActionAnchorEl(e.currentTarget)\n    setActionMenuOpen(true)\n  }\n\n  const onNameBlur = async () => {\n    if (newName !== column.name) {\n      await updateName()\n    } else {\n      setNewName('')\n      setNameEditActive(false)\n    }\n  }\n\n  const onNameChange = async (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      await updateName()\n    }\n  }\n\n  const nameInput = () => {\n    return (\n      <TextField\n        onBlur={onNameBlur}\n        value={newName}\n        autoFocus\n        onChange={(e) => setNewName(e.target.value)} placeholder=\"Col name\"\n        onKeyPress={onNameChange}\n        fullWidth={true}\n      />\n    )\n  }\n\n  const handleSetNameEditActive = () => {\n    setNewName(column.name)\n    setNameEditActive(true)\n  }\n\n  const columnName = () => {\n    return (\n      <div onClick={handleSetNameEditActive}>\n        <Typography variant=\"h6\" component=\"h2\" gutterBottom>\n          {column.name}\n        </Typography>\n        <Divider />\n      </div>\n    )\n  }\n\n  const noTasks = () => {\n    return (\n      <Typography color=\"textSecondary\">\n        No tasks in {column.name}\n      </Typography>\n    )\n  }\n  return (\n    <Card className=\"column\" style={{overflow: 'auto'}}>\n      <CardContent className={classes.content}>\n        <div className=\"column-title\">\n          <div className={classes.top}>\n          <Typography color=\"textSecondary\" gutterBottom>\n            {tasks.length} tasks\n          </Typography>\n          <MoreHorizOutlined className={classes.actionIcon} onClick={handleActionClick} color=\"action\" />\n          <Menu\n            keepMounted\n            anchorEl={actionAnchorEl}\n            open={actionMenuOpen}\n            onClose={() => setActionMenuOpen(false)}\n          >\n            <MenuItem onClick={handleDelete}>Delete column</MenuItem>\n          </Menu>\n          </div>\n          {!column.name || nameEditActive ? nameInput() : columnName()}\n        </div>\n        <Droppable droppableId={column.id}>\n          {(provided) =>\n          <div className={classes.droppable} {...provided.droppableProps} ref={provided.innerRef}>\n            {tasks.length === 0 ? noTasks(): ''}\n            {tasks.map((task, idx) => (\n              <TaskItem key={task.id} task={task} index={idx} />\n            ))}\n            {provided.placeholder}\n          </div>\n          }\n        </Droppable>\n        <div className={classes.newTask}>\n          <NewTaskInput onSubmit={createNewTask} />\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/api/taskRepository.ts",["150"],"import { NewTask, UpdateTask } from '../store/board/types'\nimport client from './client'\n\n// fix client returns Promise<T>\nexport default {\n  create(payload: NewTask) : Promise<any> {\n    return client.post('tasks', payload)\n  },\n  delete(id: string) : Promise<any> {\n    return client.delete(`tasks/${id}/`)\n  },\n  patch(id:string, payload: UpdateTask): Promise<any> {\n    return client.patch(`tasks/${id}/`, payload)\n  }\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/api/columnRepository.ts",["151"],"import { NewColumn, UpdateColumn } from '../store/board/types'\nimport client from './client'\n\n// fix client returns Promise<T>\nexport default {\n  create(payload: NewColumn) : Promise<any> {\n    return client.post('columns', payload)\n  },\n  getDetails(id: string) : Promise<any> {\n    return client.get(`columns/${id}/`)\n  },\n  delete(id: string) : Promise<any> {\n    return client.delete(`columns/${id}/`)\n  },\n  patch(id:string, payload: UpdateColumn) {\n    return client.patch(`columns/${id}/`, payload)\n  }\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/components/lists/TaskList.tsx",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/helpers/render.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/components/cards/NewBoardCard.tsx",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/components/dialogs/NewBoardDialog.tsx",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/api/authRepository.ts",["152","153"],"import { NewBoard } from '../store/board/types';\nimport { Login, Register } from '../store/user/types';\nimport client from './client'\n\n// fix client returns Promise<T>\nexport default {\n  getMe() {\n    return client.get('accounts/me/')\n  },\n  login(payload: Login) : any {\n    return client.post('accounts/token/', payload)\n  },\n  register(payload: Register) : any {\n    return client.post('accounts/', payload)\n  },\n  logout() {\n    localStorage.removeItem('jwt-tkn')\n  }\n}","/Users/sbk/Documents/dev/kanban/ollert-client/src/helpers/auth-header.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/helpers/token-set.ts",[],"/Users/sbk/Documents/dev/kanban/ollert-client/src/store/user/actions.ts",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":68,"column":6,"nodeType":"160","endLine":68,"endColumn":31,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":2,"column":10,"nodeType":"164","messageId":"165","endLine":2,"endColumn":16},{"ruleId":"158","severity":1,"message":"166","line":36,"column":6,"nodeType":"160","endLine":36,"endColumn":16,"suggestions":"167"},{"ruleId":"158","severity":1,"message":"168","line":40,"column":6,"nodeType":"160","endLine":40,"endColumn":8,"suggestions":"169"},{"ruleId":"162","severity":1,"message":"170","line":1,"column":8,"nodeType":"164","messageId":"165","endLine":1,"endColumn":22},{"ruleId":"162","severity":1,"message":"171","line":2,"column":10,"nodeType":"164","messageId":"165","endLine":2,"endColumn":25},{"ruleId":"162","severity":1,"message":"172","line":3,"column":125,"nodeType":"164","messageId":"165","endLine":3,"endColumn":136},{"ruleId":"173","severity":1,"message":"174","line":5,"column":1,"nodeType":"175","endLine":18,"endColumn":2},{"ruleId":"162","severity":1,"message":"170","line":8,"column":8,"nodeType":"164","messageId":"165","endLine":8,"endColumn":22},{"ruleId":"162","severity":1,"message":"176","line":9,"column":48,"nodeType":"164","messageId":"165","endLine":9,"endColumn":58},{"ruleId":"158","severity":1,"message":"177","line":50,"column":6,"nodeType":"160","endLine":50,"endColumn":10,"suggestions":"178"},{"ruleId":"162","severity":1,"message":"179","line":69,"column":12,"nodeType":"164","messageId":"165","endLine":69,"endColumn":23},{"ruleId":"162","severity":1,"message":"180","line":74,"column":11,"nodeType":"164","messageId":"165","endLine":74,"endColumn":30},{"ruleId":"162","severity":1,"message":"181","line":1,"column":17,"nodeType":"164","messageId":"165","endLine":1,"endColumn":23},{"ruleId":"162","severity":1,"message":"182","line":13,"column":10,"nodeType":"164","messageId":"165","endLine":13,"endColumn":23},{"ruleId":"173","severity":1,"message":"174","line":5,"column":1,"nodeType":"175","endLine":15,"endColumn":2},{"ruleId":"173","severity":1,"message":"174","line":5,"column":1,"nodeType":"175","endLine":18,"endColumn":2},{"ruleId":"162","severity":1,"message":"183","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":18},{"ruleId":"173","severity":1,"message":"174","line":6,"column":1,"nodeType":"175","endLine":19,"endColumn":2},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadedOnBoard' and 'updateTaskOrder'. Either include them or remove the dependency array.","ArrayExpression",["186"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchBoards'. Either include it or remove the dependency array.",["187"],"React Hook useEffect has a missing dependency: 'initiateUser'. Either include it or remove the dependency array.",["188"],"'taskRepository' is defined but never used.","'setCurrentBoard' is defined but never used.","'UPDATE_TASK' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'updateTask' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["189"],"'draggableId' is assigned a value but never used.","'taskDto' is assigned a value but never used.","'useRef' is defined but never used.","'DeleteOutline' is defined but never used.","'NewBoard' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},"Update the dependencies array to be: [columnId, loadedOnBoard, relativeOrder, updateTaskOrder]",{"range":"198","text":"199"},"Update the dependencies array to be: [fetchBoards, loggedIn]",{"range":"200","text":"201"},"Update the dependencies array to be: [initiateUser]",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch, id]",{"range":"204","text":"205"},[1778,1803],"[columnId, loadedOnBoard, relativeOrder, updateTaskOrder]",[942,952],"[fetchBoards, loggedIn]",[1150,1152],"[initiateUser]",[1640,1644],"[dispatch, id]"]